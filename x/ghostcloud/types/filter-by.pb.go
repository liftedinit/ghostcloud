// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ghostcloud/ghostcloud/filter-by.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Filter_Operator int32

const (
	Filter_EQUAL                 Filter_Operator = 0
	Filter_NOT_EQUAL             Filter_Operator = 1
	Filter_GREATER_THAN          Filter_Operator = 2
	Filter_LESS_THAN             Filter_Operator = 3
	Filter_GREATER_THAN_OR_EQUAL Filter_Operator = 4
	Filter_LESS_THAN_OR_EQUAL    Filter_Operator = 5
	Filter_CONTAINS              Filter_Operator = 6
	Filter_NOT_CONTAINS          Filter_Operator = 7
)

var Filter_Operator_name = map[int32]string{
	0: "EQUAL",
	1: "NOT_EQUAL",
	2: "GREATER_THAN",
	3: "LESS_THAN",
	4: "GREATER_THAN_OR_EQUAL",
	5: "LESS_THAN_OR_EQUAL",
	6: "CONTAINS",
	7: "NOT_CONTAINS",
}

var Filter_Operator_value = map[string]int32{
	"EQUAL":                 0,
	"NOT_EQUAL":             1,
	"GREATER_THAN":          2,
	"LESS_THAN":             3,
	"GREATER_THAN_OR_EQUAL": 4,
	"LESS_THAN_OR_EQUAL":    5,
	"CONTAINS":              6,
	"NOT_CONTAINS":          7,
}

func (x Filter_Operator) String() string {
	return proto.EnumName(Filter_Operator_name, int32(x))
}

func (Filter_Operator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_06bc0776f42f2222, []int{0, 0}
}

type Filter_Field int32

const (
	Filter_CREATOR Filter_Field = 0
)

var Filter_Field_name = map[int32]string{
	0: "CREATOR",
}

var Filter_Field_value = map[string]int32{
	"CREATOR": 0,
}

func (x Filter_Field) String() string {
	return proto.EnumName(Filter_Field_name, int32(x))
}

func (Filter_Field) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_06bc0776f42f2222, []int{0, 1}
}

type Filter struct {
	Field    Filter_Field    `protobuf:"varint,1,opt,name=field,proto3,enum=ghostcloud.ghostcloud.Filter_Field" json:"field,omitempty"`
	Operator Filter_Operator `protobuf:"varint,2,opt,name=operator,proto3,enum=ghostcloud.ghostcloud.Filter_Operator" json:"operator,omitempty"`
	Value    string          `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Filter) Reset()         { *m = Filter{} }
func (m *Filter) String() string { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()    {}
func (*Filter) Descriptor() ([]byte, []int) {
	return fileDescriptor_06bc0776f42f2222, []int{0}
}
func (m *Filter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Filter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Filter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Filter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Filter.Merge(m, src)
}
func (m *Filter) XXX_Size() int {
	return m.Size()
}
func (m *Filter) XXX_DiscardUnknown() {
	xxx_messageInfo_Filter.DiscardUnknown(m)
}

var xxx_messageInfo_Filter proto.InternalMessageInfo

func (m *Filter) GetField() Filter_Field {
	if m != nil {
		return m.Field
	}
	return Filter_CREATOR
}

func (m *Filter) GetOperator() Filter_Operator {
	if m != nil {
		return m.Operator
	}
	return Filter_EQUAL
}

func (m *Filter) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterEnum("ghostcloud.ghostcloud.Filter_Operator", Filter_Operator_name, Filter_Operator_value)
	proto.RegisterEnum("ghostcloud.ghostcloud.Filter_Field", Filter_Field_name, Filter_Field_value)
	proto.RegisterType((*Filter)(nil), "ghostcloud.ghostcloud.Filter")
}

func init() {
	proto.RegisterFile("ghostcloud/ghostcloud/filter-by.proto", fileDescriptor_06bc0776f42f2222)
}

var fileDescriptor_06bc0776f42f2222 = []byte{
	// 303 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4d, 0xcf, 0xc8, 0x2f,
	0x2e, 0x49, 0xce, 0xc9, 0x2f, 0x4d, 0xd1, 0x47, 0x62, 0xa6, 0x65, 0xe6, 0x94, 0xa4, 0x16, 0xe9,
	0x26, 0x55, 0xea, 0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0x89, 0x22, 0xe4, 0xf4, 0x10, 0x4c, 0xa5,
	0x73, 0x4c, 0x5c, 0x6c, 0x6e, 0x60, 0xa5, 0x42, 0x96, 0x5c, 0xac, 0x69, 0x99, 0xa9, 0x39, 0x29,
	0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x7c, 0x46, 0xca, 0x7a, 0x58, 0x75, 0xe8, 0x41, 0x54, 0xeb, 0xb9,
	0x81, 0x94, 0x06, 0x41, 0x74, 0x08, 0x39, 0x71, 0x71, 0xe4, 0x17, 0xa4, 0x16, 0x25, 0x96, 0xe4,
	0x17, 0x49, 0x30, 0x81, 0x75, 0xab, 0xe1, 0xd7, 0xed, 0x0f, 0x55, 0x1d, 0x04, 0xd7, 0x27, 0x24,
	0xc2, 0xc5, 0x5a, 0x96, 0x98, 0x53, 0x9a, 0x2a, 0xc1, 0xac, 0xc0, 0xa8, 0xc1, 0x19, 0x04, 0xe1,
	0x28, 0xcd, 0x60, 0xe4, 0xe2, 0x80, 0x29, 0x16, 0xe2, 0xe4, 0x62, 0x75, 0x0d, 0x0c, 0x75, 0xf4,
	0x11, 0x60, 0x10, 0xe2, 0xe5, 0xe2, 0xf4, 0xf3, 0x0f, 0x89, 0x87, 0x70, 0x19, 0x85, 0x04, 0xb8,
	0x78, 0xdc, 0x83, 0x5c, 0x1d, 0x43, 0x5c, 0x83, 0xe2, 0x43, 0x3c, 0x1c, 0xfd, 0x04, 0x98, 0x40,
	0x0a, 0x7c, 0x5c, 0x83, 0x83, 0x21, 0x5c, 0x66, 0x21, 0x49, 0x2e, 0x51, 0x64, 0x05, 0xf1, 0xfe,
	0x41, 0x50, 0xbd, 0x2c, 0x42, 0x62, 0x5c, 0x42, 0x70, 0x95, 0x08, 0x71, 0x56, 0x21, 0x1e, 0x2e,
	0x0e, 0x67, 0x7f, 0xbf, 0x10, 0x47, 0x4f, 0xbf, 0x60, 0x01, 0x36, 0x90, 0x0d, 0x20, 0x0b, 0xe1,
	0x22, 0xec, 0x4a, 0x22, 0x5c, 0xac, 0xe0, 0x40, 0x10, 0xe2, 0xe6, 0x62, 0x77, 0x06, 0x99, 0xed,
	0x1f, 0x24, 0xc0, 0xe0, 0x64, 0x7e, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e,
	0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51,
	0xb2, 0x48, 0xb1, 0x53, 0x81, 0x1c, 0x55, 0x25, 0x95, 0x05, 0xa9, 0xc5, 0x49, 0x6c, 0xe0, 0x78,
	0x32, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xfd, 0xbc, 0xca, 0xda, 0xd0, 0x01, 0x00, 0x00,
}

func (m *Filter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Filter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Filter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintFilterBy(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Operator != 0 {
		i = encodeVarintFilterBy(dAtA, i, uint64(m.Operator))
		i--
		dAtA[i] = 0x10
	}
	if m.Field != 0 {
		i = encodeVarintFilterBy(dAtA, i, uint64(m.Field))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintFilterBy(dAtA []byte, offset int, v uint64) int {
	offset -= sovFilterBy(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Filter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Field != 0 {
		n += 1 + sovFilterBy(uint64(m.Field))
	}
	if m.Operator != 0 {
		n += 1 + sovFilterBy(uint64(m.Operator))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovFilterBy(uint64(l))
	}
	return n
}

func sovFilterBy(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFilterBy(x uint64) (n int) {
	return sovFilterBy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Filter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilterBy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Filter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Filter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			m.Field = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilterBy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Field |= Filter_Field(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			m.Operator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilterBy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Operator |= Filter_Operator(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilterBy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFilterBy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFilterBy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFilterBy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFilterBy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFilterBy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFilterBy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFilterBy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFilterBy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFilterBy
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFilterBy
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFilterBy
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFilterBy        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFilterBy          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFilterBy = fmt.Errorf("proto: unexpected end of group")
)
